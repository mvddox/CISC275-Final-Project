import { useState } from "react";
import { Button, Form } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import "./CurrentResultPage.css"
import { PreviousResultType, useAIResults } from '../AIResultsContext';
import PreviousResult, { isDetailed } from "./components/PreviousResult";
import { renderToString } from 'react-dom/server';
import ValueBars from "./components/valueBars";

export let keyData = "";

const saveKeyData = "MYKEY";
const prevKey = localStorage.getItem(saveKeyData);
if (prevKey !== null) {
  keyData = JSON.parse(prevKey);
}

function NavigationButton() {
  const navigate = useNavigate();
  return (
    <div>
      <Button className="Button" onClick={() => navigate("/Home")}>
        Home Page
      </Button>
    </div>
  );
}
function NavigationPreviousResultsButton() {
  const navigate = useNavigate();
  return (
    <div>
      <Button className="Button" onClick={() => navigate("/PreviousResults")}>
      Back to Previous?
      </Button>
    </div>
  );
}

function CurrentResultPage() {
  const [key, setKey] = useState<string>(keyData);
  const finishedResult: PreviousResultType = useAIResults().result;

  function handleSubmit() {
    localStorage.setItem(saveKeyData, JSON.stringify(key));
    window.location.reload();
  }

  function changeKey(event: React.ChangeEvent<HTMLInputElement>) {
    setKey(event.target.value);
  }


  // credit to https://stackoverflow.com/questions/68152987/how-to-download-part-of-a-react-component
  // downloads result as html file
  function downloadResult(){
    // putting the css here makes in look ugly so i put it in public
    fetch("/Result.css").then((x)=>{
      x.text().then((y)=>{
        const html = renderToString(<div>
          <style>{y}</style><PreviousResult finishedResult={{...finishedResult}} complete={true}></PreviousResult></div>)
        const blob = new Blob([html]);
        const url = URL.createObjectURL(blob);
        const tempEl = document.createElement("a");
        document.body.appendChild(tempEl);
        tempEl.href = url;
        tempEl.download = "CareerResults.html";
        tempEl.click();
        setTimeout(() => {
          URL.revokeObjectURL(url);
          if(tempEl.parentNode){
            tempEl.parentNode.removeChild(tempEl);
          }
        }, 2000);
  
  
  })
    })


    

  }
  return (
    <div className="Results">
      
      <div className="header-content">
        <h1>Results</h1>
        <NavigationButton />
      </div>
      <div className="results-container">

          {isDetailed(finishedResult) ? <div>Detailed Result</div>: <div>Basic Result</div>}

        {/* Just like my heckin fortune!!! Shows a defined, simple, determined result */}
        <div className="final-career" style={{"color":finishedResult.colorVibe}}>
          {finishedResult.finalDeclaredFuture +" ~~ "+ finishedResult.finalCareer}
        </div>
        {/* Shows the career's salary range */}
        <div className="salary">
          <strong>Salary Range:</strong> {finishedResult.salary}
        </div>
        {/* Shows a description of the career */}
        <div className="description">
          <br /><h3>Career Description: </h3> {finishedResult.description}
        </div>
        {/* Shows the average education needed for career */}
        <div className="education">
          <br /><h3>Education Requirement: </h3>{finishedResult.education}
        </div>
        {/* Shows the user how to get started on the career path */}
        <div className="gettingStarted">
          <br /><h3>Getting Started: </h3>
          <ul style={{listStyleType: "none"}}>{finishedResult.getStarted.split("|").map((res, i) => <li key={i}>{res}</li>)}</ul>
        </div>
        <div className="personalityAnalysis">
          <h2>Personality Analysis:</h2>
        </div>
        {/* Shows individual insights if finished loading */}
        <div className="results-list">
          <br /><h3>Individual Insights:</h3>
          <ul style={{ listStyleType: "none", paddingLeft: 0, margin: 0 }}>
            {finishedResult.results.map((res, i) => (
              <li key={i}>{res}</li>
            ))}
          </ul>
        </div>
        {/* Shows character analysis */}
        <div className="final-results">
          <br /><h3>Character Analysis:</h3>
          <p>{finishedResult.finalResult}</p>
        </div>
        {/* Shows career prediction */}
        <div className="final-sentence">
          <h3>Overall Suggestion:</h3>
          <p>{finishedResult.finalSentence}</p>
        </div>

        {isDetailed(finishedResult)  ?
            <ValueBars values={finishedResult.values}></ValueBars>
        : <></>}

        <div className="date">Generated at: {finishedResult.date}</div>
        {/*Makes user not do stupid stuff*/}
        <div className="ai-disclaimer">
          Generated by AI: All choices are yours, and the future is ultimately in your hands. Not responsible for any user damages.
        </div>
      </div>
      <Button className="Button" onClick={downloadResult}>
        Download?
      </Button>
      <NavigationPreviousResultsButton></NavigationPreviousResultsButton>

      <footer>
        <Form>
          <Form.Label htmlFor="api-key-input">API Key:</Form.Label>
          <Form.Control
            id="api-key-input"
            type="password"
            placeholder="Insert API Key Here"
            value={key}
            onChange={changeKey}
          />
          <br />
          <Button className="Submit-Button" onClick={handleSubmit}>
            Submit
          </Button>
        </Form>
        <div className='AuthorText'>
          <br />
          </div>
      </footer>
    </div>
  );
}

export default CurrentResultPage;
